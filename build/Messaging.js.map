{"version":3,"sources":["../src/Messaging.js"],"names":["messaging","client","connectWithPromise","Promise","resolve","reject","mqtt","connect","options","host","err","console","log","on","subscribe","topicName","error","publish","message","registerMessageHandler","handler","topic","toString","messagingClient"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,SAASA,SAAT,GAAqB;AACnB,MAAIC,MAAJ,CADmB,CAGnB;;AACA,WAASC,kBAAT,GAA8B;AAC5B,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAI;AACFJ,QAAAA,MAAM,GAAGK,iBAAKC,OAAL,CAAaC,6BAAQC,IAArB,EAA2BD,4BAA3B,CAAT;AACD,OAFD,CAEE,OAAOE,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAP,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD;;AAEDT,MAAAA,MAAM,CAACY,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC9BF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAR,QAAAA,OAAO,CAAC,YAAD,CAAP;AACD,OAHD;AAID,KAZM,CAAP;AAaD,GAlBkB,CAoBnB;;;AACA,WAASU,SAAT,CAAmBC,SAAnB,EAA8B;AAC5Bd,IAAAA,MAAM,CAACa,SAAP,CAAiBC,SAAjB,EAA4B,UAASL,GAAT,EAAc;AACxC,UAAIA,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd,EAAsCD,SAAtC,EAAiDL,GAAjD;AACD;AACF,KAJD;AAKD,GA3BkB,CA6BnB;;;AACA,WAASO,OAAT,CAAiBF,SAAjB,EAA4BG,OAA5B,EAAqC;AACnCjB,IAAAA,MAAM,CAACgB,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,EAAmC,UAASR,GAAT,EAAc;AAC/C,UAAIA,GAAJ,EAAS;AACPC,QAAAA,OAAO,CAACK,KAAR,CAAc,sBAAd,EAAsCD,SAAtC,EAAiDL,GAAjD;AACD;AACF,KAJD;AAKD,GApCkB,CAsCnB;;;AACA,WAASS,sBAAT,CAAgCC,OAAhC,EAAyC;AACvCnB,IAAAA,MAAM,CAACY,EAAP,CAAU,SAAV,EAAqB,UAASQ,KAAT,EAAgBH,OAAhB,EAAyB;AAC5CE,MAAAA,OAAO,CAACC,KAAK,CAACC,QAAN,EAAD,EAAmBJ,OAAO,CAACI,QAAR,EAAnB,CAAP;AACD,KAFD;AAGD;;AAED,SAAO;AACLpB,IAAAA,kBAAkB,EAAEA,kBADf;AAELY,IAAAA,SAAS,EAAEA,SAFN;AAGLG,IAAAA,OAAO,EAAEA,OAHJ;AAILE,IAAAA,sBAAsB,EAAEA;AAJnB,GAAP;AAMD;;AAED,IAAII,eAAe,GAAGvB,SAAS,EAA/B;eACeuB,e","sourcesContent":["import mqtt from 'mqtt';\r\nimport options from './messaging-options';\r\n\r\nfunction messaging() {\r\n  let client;\r\n\r\n  // Connect to the message broker\r\n  function connectWithPromise() {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        client = mqtt.connect(options.host, options);\r\n      } catch (err) {\r\n        console.log('error connecting!');\r\n        reject(err);\r\n      }\r\n\r\n      client.on('connect', function() {\r\n        console.log('Connected to broker!');\r\n        resolve('Connected!');\r\n      });\r\n    });\r\n  }\r\n\r\n  // Subscribe to a topic on to the broker\r\n  function subscribe(topicName) {\r\n    client.subscribe(topicName, function(err) {\r\n      if (err) {\r\n        console.error('Error subscribing to', topicName, err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Publish a message to the broker\r\n  function publish(topicName, message) {\r\n    client.publish(topicName, message, function(err) {\r\n      if (err) {\r\n        console.error('Error subscribing to', topicName, err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Register a function to handle received messages\r\n  function registerMessageHandler(handler) {\r\n    client.on('message', function(topic, message) {\r\n      handler(topic.toString(), message.toString());\r\n    });\r\n  }\r\n\r\n  return {\r\n    connectWithPromise: connectWithPromise,\r\n    subscribe: subscribe,\r\n    publish: publish,\r\n    registerMessageHandler: registerMessageHandler\r\n  };\r\n}\r\n\r\nlet messagingClient = messaging();\r\nexport default messagingClient;\r\n"],"file":"Messaging.js"}