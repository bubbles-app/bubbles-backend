{"version":3,"sources":["../src/App.js"],"names":["App","messagingClient","connectWithPromise","then","response","console","log","registerMessageHandler","app","messageHandler","bind","error","topicString","messageString","message","JSON","parse","warn","topic","publish","subscribe"],"mappings":";;;;;;;AAAA;;;;;;;;;;IAEMA,G;AACJ,iBAAc;AAAA;AAAE;;;;WAEhB,sBAAa;AAAA;;AACX;AACAC,4BACGC,kBADH,GAEGC,IAFH,CAEQ,UAACC,QAAD,EAAc;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDF,QAAtD,EADkB,CAGlB;;AACAH,8BAAgBM,sBAAhB,CAAuCC,GAAG,CAACC,cAAJ,CAAmBC,IAAnB,CAAwB,KAAxB,CAAvC;AACD,OAPH,WAQS,UAACC,KAAD,EAAW;AAChBN,QAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgEK,KAAhE;AACD,OAVH;AAWD;;;WAED,wBAAeC,WAAf,EAA4BC,aAA5B,EAA2C;AACzCR,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCM,WAArC,EAAkD,IAAlD,EAAwDC,aAAxD,EADyC,CAEzC;;AACA,cAAQD,WAAR;AACE,aAAK,WAAL;AAAkB;AAChB,gBAAME,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,aAAX,CAAhB;AACAR,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCQ,OAAjC;AACA;AACD;;AACD;AAAS;AACPT,YAAAA,OAAO,CAACY,IAAR,CAAa,kBAAb,EAAiCL,WAAjC;AACA;AACD;AATH;AAWD;;;WAED,wBAAeM,KAAf,EAAsBJ,OAAtB,EAA+B;AAC7Bb,4BAAgBkB,OAAhB,CAAwBD,KAAxB,EAA+BJ,OAA/B;AACD;;;WAED,0BAAiBI,KAAjB,EAAwB;AACtBjB,4BAAgBmB,SAAhB,CAA0BF,KAA1B;AACD;;;;;;AAGH,IAAMV,GAAG,GAAG,IAAIR,GAAJ,EAAZ;eACeQ,G","sourcesContent":["import messagingClient from './Messaging';\r\n\r\nclass App {\r\n  constructor() {}\r\n\r\n  initialize() {\r\n    // First, connect to the Solace Message Broker\r\n    messagingClient\r\n      .connectWithPromise()\r\n      .then((response) => {\r\n        console.log('Succesfully connected to Solace Cloud.', response);\r\n\r\n        // Now that we are successfully connected, register our message handler\r\n        messagingClient.registerMessageHandler(app.messageHandler.bind(this));\r\n      })\r\n      .catch((error) => {\r\n        console.log('Unable to establish connection with Solace Cloud', error);\r\n      });\r\n  }\r\n\r\n  messageHandler(topicString, messageString) {\r\n    console.log('New message on topic:', topicString, '::', messageString);\r\n    // Here is where you add code to handle the message\r\n    switch (topicString) {\r\n      case 'SomeTopic': {\r\n        const message = JSON.parse(messageString);\r\n        console.log('Message as object', message);\r\n        break;\r\n      }\r\n      default: {\r\n        console.warn('Unexpected topic', topicString);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  publishMessage(topic, message) {\r\n    messagingClient.publish(topic, message);\r\n  }\r\n\r\n  subscribeToTopic(topic) {\r\n    messagingClient.subscribe(topic);\r\n  }\r\n}\r\n\r\nconst app = new App();\r\nexport default app;\r\n"],"file":"App.js"}