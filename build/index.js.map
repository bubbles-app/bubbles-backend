{"version":3,"sources":["../src/index.js"],"names":["express","require","bodyParser","server","port","process","env","PORT","allowCrossDomain","req","res","next","header","method","send","use","json","urlencoded","extended","app","initialize","rooms","get","status","message","post","request","response","randomwords","randomnumber","code","exactly","join","concat","min","max","integer","subscribeToTopic","users","videoQueue","videoState","time","isPaused","console","log","body","error","push","roomcode","username","publishMessage","JSON","stringify","messageType","listen"],"mappings":"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","sourcesContent":["// Import modules\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nimport app from './App';\r\n\r\n// Setupp\r\nconst server = express();\r\nconst port = process.env.PORT || 9000;\r\nconst allowCrossDomain = (req, res, next) => {\r\n  res.header('Access-Control-Allow-Origin', '*');\r\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\r\n  res.header('Access-Control-Allow-Headers', 'Content-Type, Authorization, Content-Length, X-Requested-With');\r\n  // intercept OPTIONS method\r\n  if ('OPTIONS' == req.method) {\r\n    res.send(200);\r\n  } else {\r\n    next();\r\n  }\r\n};\r\nserver.use(allowCrossDomain);\r\nserver.use(bodyParser.json());\r\nserver.use(\r\n  bodyParser.urlencoded({\r\n    extended: true\r\n  })\r\n);\r\napp.initialize();\r\n\r\nconst rooms = {};\r\n\r\nserver.get('/', (req, res) => {\r\n  res.status(200).json({ message: 'herro' });\r\n});\r\n\r\n//-------------------Create Room-----------------------------\r\nserver.post('/createroom', (request, response) => {\r\n  var randomwords = require('random-words');\r\n  var randomnumber = require('random-number');\r\n  var code = randomwords({ exactly: 2, join: '-' }).concat('-', randomnumber({ min: 1, max: 9, integer: true }));\r\n\r\n  //Subscribing to topic\r\n  app.subscribeToTopic(code);\r\n\r\n  rooms[code] = {\r\n    users: [],\r\n    videoQueue: [],\r\n    videoState: {\r\n      time: 0,\r\n      isPaused: false\r\n    }\r\n  };\r\n\r\n  response.status(200).json({\r\n    message: code\r\n  });\r\n});\r\n\r\n//-------------------Join Room-----------------------------\r\nserver.post('/joinroom', bodyParser.json(), (request, response) => {\r\n  console.log(request.body);\r\n\r\n  //Cannot locate room\r\n  if (!(request.body['roomcode'] in rooms)) {\r\n    response.status(400).json({ error: 'error joining room' });\r\n    console.log('Error joining room - No Roomcode Exist');\r\n    return;\r\n  }\r\n\r\n  //Adding user to room\r\n  rooms[request.body['roomcode']]['users'].push(request.body['username']);\r\n  response.status(200).json({ message: 'room joined' });\r\n\r\n  //Publishing join message\r\n  const roomcode = request.body['roomcode'];\r\n  const username = request.body['username'];\r\n  app.publishMessage(roomcode, JSON.stringify({ messageType: 'userJoined', username: username }));\r\n  console.log('Publishing join message');\r\n\r\n  console.log(rooms);\r\n});\r\n\r\n//-------------------Get Users-----------------------------\r\nserver.post('/getUsers', bodyParser.json(), (request, response) => {\r\n  console.log(request.body);\r\n\r\n  //Cannot locate room\r\n  if (!(request.body['roomcode'] in rooms)) {\r\n    response.status(400).json({ error: 'Error - no room exist' });\r\n    console.log('Error - No Roomcode Exist');\r\n    return;\r\n  }\r\n\r\n  const roomcode = request.body['roomcode'];\r\n\r\n  //Sending list of users\r\n  response.status(200).json({\r\n    users: rooms[roomcode]['users']\r\n  });\r\n});\r\n\r\nserver.listen(port, () => console.log(`Listening on ${port}`));\r\n"],"file":"index.js"}